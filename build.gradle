apply plugin: 'java'
apply plugin: 'signing'
apply plugin: 'maven'

group = "com.github.douglasorr"
version = '0.1.0'
ext.source_version = "git rev-parse HEAD".execute().text
ext.can_sign = project.hasProperty("signing.keyId")

// build
compileJava {
    sourceCompatibility = 1.6
    targetCompatibility = 1.6
}
tasks.withType(JavaCompile) {
    // apply this to main & test compilation
    //options.compilerArgs << "-Xlint:unchecked"
}
jar {
    manifest {
        attributes("Specification-Title": "Immutable data structures (with structural sharing)",
                   "Specification-Vendor": "Douglas Orr",
                   "Specification-Version": version,
                   "Implementation-Title": "com.github.douglasorr.shared",
                   "Implementation-Version": source_version)
    }
}
javadoc {
    options.addStringOption("link", "http://docs.oracle.com/javase/7/docs/api")
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

// signing & publishing
artifacts {
    archives jar, javadocJar, sourcesJar
}
signing {
    required { can_sign }
    sign configurations.archives
}
uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            if (project.hasProperty("sonatypeUsername")) {
                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: "$sonatypeUsername", password: "$sonatypePassword")
                }
            }
            pom.artifactId = "shared"
            pom.project {
                name 'SharedCollections'
                packaging 'jar'
                description 'An immutable data structures library for use in plain old Java'
                url 'http://douglasorr.github.io/SharedCollections/'

                scm {
                    url 'scm:git@github.com:DouglasOrr/SharedCollections.git'
                    connection 'scm:git@github.com:DouglasOrr/SharedCollections.git'
                    developerConnection 'scm:git@github.com:DouglasOrr/SharedCollections.git'
                }
                licenses {
                    license {
                        name 'MIT License'
                        url 'http://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        id 'douglasorr'
                        name 'Douglas Orr'
                    }
                }
            }
        }
    }
}

// deps
repositories {
    mavenCentral()
}
dependencies {
    testCompile 'junit:junit:4.11'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'org.clojure:clojure:1.6.0'
    testCompile 'org.scala-lang:scala-library:2.11.4'
    testCompile 'com.google.guava:guava:18.0'
    testCompile 'com.google.code.gson:gson:2.3.1'
    testCompile 'commons-cli:commons-cli:1.2'
    testCompile files('lib/object-explorer.jar')
}

ext.profileCsv = new File("build/reports/profile.csv")
ext.profileJson = new File("build/reports/profile.json")

// other tasks
task runProfile(dependsOn: 'testClasses', type: JavaExec, description: "Run the performance & memory tests (slow)") {
    main = 'com.github.douglasorr.shared.Profile'
    classpath = sourceSets.test.runtimeClasspath
    jvmArgs = ['-javaagent:lib/object-explorer.jar']
    args = ["--csv", profileCsv, "--json", profileJson]
    outputs.files profileCsv, profileJson
}

class UpdatePages extends DefaultTask {
    String destDir;

    @TaskAction
    def update() {
        def remote = "git@github.com:DouglasOrr/SharedCollections.git"
        def pages = "build/gh-pages"
        def sources = inputs.files.collect {it -> it.getAbsolutePath()}.join(" ")

        // refresh the pages clone
        "rm -rf ${pages}".execute().waitFor()
        "git clone --single-branch --branch gh-pages ${remote} ${pages}".execute().waitFor()

        // copy in sources, commit, push destDir
        ["rm -rf ${destDir}",
         "mkdir -p ${destDir}",
         "cp -r ${sources} ${destDir}",
         "git add --all ${destDir}",
         ["git", "commit", "--message", "Update ${destDir} for ${project.version} (${project.source_version.substring(0,8)})"],
         "git push"
        ].each {
            def proc = it.execute(null, new File(pages))
            proc.waitFor()
            if (proc.exitValue() != 0) {
                throw new GradleScriptException("\$ ${it} failed with code ${proc.exitValue()}, saying:\n${proc.err.text}", null)
            }
        }
    }
}

task publishDoc(type: UpdatePages, description: "Publishes javadoc to gh-pages") {
    inputs.file javadoc
    destDir = "releases/${version}" // ./javadoc (implicit)
}

task publishProfile(type: UpdatePages, description: "Publishes profiling report to gh-pages") {
    inputs.file runProfile
    destDir = "releases/${version}/profile"
}

task release(dependsOn: ['uploadArchives', 'publishDoc', 'publishProfile'],
             description: "Runs all release tasks for the current version") << {
    "git push origin HEAD:refs/tags/${version}".execute().waitFor()
}
